PROJECT(WCSLIB)
CMAKE_MINIMUM_REQUIRED(VERSION 3.4)

# Allow the developer to select if Dynamic or Static libraries are built
OPTION (BUILD_SHARED_LIBS "Build Shared Libraries" OFF)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}")

SET(INCLUDE_DIRS
    "${CMAKE_CURRENT_SOURCE_DIR}"
    "${CMAKE_CURRENT_SOURCE_DIR}/C"
)

# Define project version
SET(${PROJECT_NAME}_MAJOR_VERSION 7)
SET(${PROJECT_NAME}_MINOR_VERSION 1)
SET(${PROJECT_NAME}_VERSION ${${PROJECT_NAME}_MAJOR_VERSION}.${${PROJECT_NAME}_MINOR_VERSION})
SET(LIB_NAME wcslib)

# run ./configure for setting config file
IF(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/wcsconfig.h")
  MESSAGE(STATUS "wcslib already configured...")
ELSE()
  EXECUTE_PROCESS(COMMAND ./configure WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
ENDIF()

#run lex files
if(EXISTS "${CMAKE_SOURCE_DIR}/C/fitshdr.c")
  MESSAGE(STATUS "flex fitshdr already created")
ELSE()
  EXECUTE_PROCESS(COMMAND flex ${CMAKE_CURRENT_SOURCE_DIR}/C/fitshdr.l WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/C")
ENDIF()

if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/C/wcsbth.c")
  MESSAGE(STATUS "flex wcsbth already created")
ELSE()
  EXECUTE_PROCESS(COMMAND flex ${CMAKE_CURRENT_SOURCE_DIR}/C/wcsbth.l WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/C")
ENDIF()

if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/C/wcspih.c")
  MESSAGE(STATUS "flex wcspih already created")
ELSE()
  EXECUTE_PROCESS(COMMAND flex ${CMAKE_CURRENT_SOURCE_DIR}/C/wcspih.l WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/C")
ENDIF()

if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/C/wcsulex.c")
  MESSAGE(STATUS "flex wcsulex already created")
ELSE()
  EXECUTE_PROCESS(COMMAND flex ${CMAKE_SOURCE_DIR}/C/wcsulex.l WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/C")
ENDIF()

if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/C/wcsutrn.c")
  MESSAGE(STATUS "flex wcsutrn already created")
ELSE()
  EXECUTE_PROCESS(COMMAND flex ${CMAKE_CURRENT_SOURCE_DIR}/C/wcsutrn.l WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/C")
ENDIF()

SET (LIB_TYPE STATIC)
IF (BUILD_SHARED_LIBS)
  SET (LIB_TYPE SHARED)
ENDIF (BUILD_SHARED_LIBS)

SET(H_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/wcsconfig.h   ${CMAKE_CURRENT_SOURCE_DIR}/wcsconfig_f77.h   ${CMAKE_CURRENT_SOURCE_DIR}/wcsconfig_tests.h   ${CMAKE_CURRENT_SOURCE_DIR}/wcsconfig_utils.h
    ${CMAKE_CURRENT_SOURCE_DIR}/C/cel.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/dis.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/fitshdr.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/getwcstab.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/lin.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/log.h
    ${CMAKE_CURRENT_SOURCE_DIR}/C/prj.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/spc.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/sph.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/spx.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/tab.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/wcs.h
    ${CMAKE_CURRENT_SOURCE_DIR}/C/wcserr.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/wcsfix.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/wcshdr.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/wcsprintf.h
    ${CMAKE_CURRENT_SOURCE_DIR}/C/wcstrig.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/wcsunits.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/wcsutil.h   ${CMAKE_CURRENT_SOURCE_DIR}/C/wtbarr.h
)

SET(SRC_FILES
    ${CMAKE_CURRENT_SOURCE_DIR}/C/cel.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/dis.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/fitshdr.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/getwcstab.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/lin.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/log.c
    ${CMAKE_CURRENT_SOURCE_DIR}/C/prj.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/spc.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/sph.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/spx.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/tab.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/wcs.c
    ${CMAKE_CURRENT_SOURCE_DIR}/C/flexed/wcsbth.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/wcserr.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/wcsfix.c   C/wcshdr.c
    ${CMAKE_CURRENT_SOURCE_DIR}/C/flexed/wcspih.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/wcsprintf.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/wcstrig.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/flexed/wcsulex.c
    ${CMAKE_CURRENT_SOURCE_DIR}/C/flexed/wcsulex.c  ${CMAKE_CURRENT_SOURCE_DIR}/C/wcsunits.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/wcsutil.c   ${CMAKE_CURRENT_SOURCE_DIR}/C/wcsutrn.c
)

INCLUDE_DIRECTORIES(${INCLUDE_DIRS})

ADD_LIBRARY(${LIB_NAME} ${LIB_TYPE} ${H_FILES} ${SRC_FILES})
TARGET_LINK_LIBRARIES(${LIB_NAME} cfitsio)

SET_TARGET_PROPERTIES(${LIB_NAME} PROPERTIES VERSION ${${PROJECT_NAME}_VERSION} SOVERSION ${${PROJECT_NAME}_MAJOR_VERSION})
